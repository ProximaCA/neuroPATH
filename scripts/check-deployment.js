#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ neuroPATH –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ neuroPATH –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é...\n');

const checks = [
  {
    name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞',
    check: () => {
      const requiredFiles = [
        'nextjs-starter/package.json',
        'nextjs-starter/next.config.mjs',
        'nextjs-starter/vercel.json',
        'telegram-bot/package.json',
        'telegram-bot/bot.js',
        'infra/supabase/schema.sql',
        'infra/supabase/seed.sql',
        '.github/workflows/ci-cd.yml'
      ];
      
      const missing = requiredFiles.filter(file => !fs.existsSync(file));
      if (missing.length > 0) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: ${missing.join(', ')}`);
      }
      return '‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç';
    }
  },
  {
    name: 'Next.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
    check: () => {
      const packageJson = JSON.parse(fs.readFileSync('nextjs-starter/package.json', 'utf8'));
      const requiredDeps = [
        '@once-ui-system/core',
        '@supabase/supabase-js',
        '@twa-dev/sdk',
        'next',
        'react',
        'react-dom'
      ];
      
      const missing = requiredDeps.filter(dep => !packageJson.dependencies[dep]);
      if (missing.length > 0) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing.join(', ')}`);
      }
      return '‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Next.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã';
    }
  },
  {
    name: 'Telegram bot –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
    check: () => {
      const packageJson = JSON.parse(fs.readFileSync('telegram-bot/package.json', 'utf8'));
      const requiredDeps = ['grammy', '@supabase/supabase-js', 'dotenv'];
      
      const missing = requiredDeps.filter(dep => !packageJson.dependencies[dep]);
      if (missing.length > 0) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–æ—Ç–∞: ${missing.join(', ')}`);
      }
      return '‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Telegram bot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã';
    }
  },
  {
    name: 'Vercel –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
    check: () => {
      const vercelConfig = JSON.parse(fs.readFileSync('nextjs-starter/vercel.json', 'utf8'));
      if (!vercelConfig.name || !vercelConfig.env) {
        throw new Error('–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Vercel');
      }
      return '‚úÖ Vercel –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞';
    }
  },
  {
    name: 'GitHub Actions',
    check: () => {
      const workflow = fs.readFileSync('.github/workflows/ci-cd.yml', 'utf8');
      if (!workflow.includes('vercel-action') || !workflow.includes('VERCEL_TOKEN')) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub Actions');
      }
      return '‚úÖ GitHub Actions workflow –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
    }
  },
  {
    name: 'Supabase —Å—Ö–µ–º–∞',
    check: () => {
      const schema = fs.readFileSync('infra/supabase/schema.sql', 'utf8');
      const requiredTables = ['users', 'elements', 'missions', 'user_artifacts'];
      
      const missing = requiredTables.filter(table => {
        const upperCase = `CREATE TABLE ${table}`;
        const lowerCase = `create table ${table}`;
        return !schema.includes(upperCase) && !schema.includes(lowerCase);
      });
      if (missing.length > 0) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: ${missing.join(', ')}`);
      }
      return '‚úÖ Supabase —Å—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã';
    }
  },
  {
    name: 'Environment —Ñ–∞–π–ª—ã',
    check: () => {
      const envExample = fs.existsSync('nextjs-starter/env.example');
      const botEnvExample = fs.existsSync('telegram-bot/env.example');
      
      if (!envExample || !botEnvExample) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç example —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã');
      }
      return '‚úÖ Environment example —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã';
    }
  }
];

let passed = 0;
let failed = 0;

for (const check of checks) {
  try {
    console.log(`üîç ${check.name}:`);
    const result = check.check();
    console.log(`   ${result}\n`);
    passed++;
  } catch (error) {
    console.log(`   ‚ùå ${error.message}\n`);
    failed++;
  }
}

console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failed}`);

if (failed === 0) {
  console.log('\nüéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!');
  console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. git add . && git commit -m "Deploy ready"');
  console.log('2. git push origin main');
  console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Vercel –ø—Ä–æ–µ–∫—Ç');
  console.log('4. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã');
  console.log('5. –°–æ–∑–¥–∞–π—Ç–µ Telegram –±–æ—Ç–∞');
  console.log('\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ DEPLOYMENT.md');
} else {
  console.log('\n‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.');
  console.log('–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞.');
  process.exit(1);
} 